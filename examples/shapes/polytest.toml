name = "shapes example"

# Test Case Definition

## Suites

[suite.circle]
desc = "A circle is a shape defined by all points on a plane that are equidistant from a given point"
groups = ["shape", "circle"]

[suite.rectangle]
desc = "A rectangle is a polygon with four right angles"
groups = ["shape", "polygon", "rectangle"]

[suite.triangle]
desc = "A triangle is a polygon with three edges"
groups = ["shape", "polygon"]

# Groups

[group.polygon]
desc = "Tests that only apply to polygons"

[group.circle]
desc = "Tests that only apply to circles"

[group.shape]
desc = "Tests that apply to any shape. A shape is a polygon OR a circle"

[group.rectangle]
desc = "Tests that apply only to rectangles, a subset of polygons"


## Tests

[test.area]
desc = "A shape should be able to accurately calculate its area"
group = "shape"

[test.perimeter]
desc = "A shape should be able to accurately calculate its perimeter (or circumference)"
group = "shape"

[test.vertex_count]
desc = "A polygon should accurately count the number of verticies it contains"
group = "polygon"

[test.edge_count]
desc = "A polygon should accurately count the number of edges it contains"
group = "polygon"

[test.is_square]
desc = "A rectangle should be able to accurately determine if it is a square"
group = "rectangle"

[test.radius]
desc = "A circle should be able to accurately calculate its radius"
group = "circle"

[test.diameter]
desc = "A circle should be able to accurately calculate its diameter"
group = "circle"

# Test Targets

[target.pytest]
out_dir = "./implementations/python/tests"

[target.bun]
out_dir = "./implementations/bun/__tests__"

# Document

[document.markdown]
out_file = "./documents/plan.md"

# Custom Test Target

[custom_target.minitest_unit]
out_dir = "./implementations/ruby/test"

suite_file_name_template = "test_{{ suite.name | convert_case('Snake') }}.rb"
test_regex_template = "def test_{{ name | convert_case('Snake') }}"

template_dir = "./templates/minitest_unit"

[custom_target.minitest_unit.runner]
fail_regex_template = "Test{{ suite_name | convert_case('Pascal') }}#test_{{ test_name }} = \\d+\\.\\d+ s = (F|E)"
pass_regex_template = "Test{{ suite_name | convert_case('Pascal') }}#test_{{ test_name }} = \\d+\\.\\d+ s = \\."

command = "bundle"
args = ["exec", "rake", "test", "A='--verbose'"]

# Custom Document

[document.test_cases_csv]
out_file = "./documents/test_cases.csv"
template = "./templates/test_cases.csv.jinja"
