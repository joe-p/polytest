# The name of the test plan
name = "vehicles example"

# A target defines how the tests will be generated and validated
# Polytest includes some targets out of the box, in which case you just need to specify the output directory

# The pytest target will generate Python tests for pytest
[target.pytest]
out_dir = "./generated/pytest"

# The markdown target will generate a markdown file with the test plan
[target.markdown]
out_dir = "./generated"

# The bun target will generate TypeScript tests for the bun test runner
[target.bun]
out_dir = "./generated/bun"

# Each suite, group, and test are defined in a table with a unique name.
# The name is used to generate and validate the tests, so it should not be changed.
#
# These tables may also have the following fields:
# - desc: a description that will show up in the generated tests as a comment
#
# If a desc is not provided, it will be an empty string

# Suites are the top level of the test hierarchy and contain groups of tests
# Each suite typically maps to a new test file in the generated test directory
[suite.motorcycle]
groups = ["valid vehicle", "invalid vehicle", "broken vehicle"]

[suite.car]
groups = ["valid vehicle", "invalid vehicle", "broken vehicle"]

# Groups contain multiple tests

[group."valid vehicle"]
desc = "Functionality works as expected when the vehicle is valid and not missing any parts"

[group."invalid vehicle"]
desc = "Errors are thrown when the vehicle has extra parts, which should never happen"

[group."broken vehicle"]
desc = "When the vehicle has parts that need repair, the respective functions should detect the issue"

# Tests define the actual tests that will be generated

[test."check headlights"]
group = "valid vehicle"
desc = "The function for checking headlights should return true if the vehicle has the correct number of headlights"

[test."check tires"]
group = "valid vehicle"
desc = "The function for checking tires should return true if the vehicle has the correct number of inflated tires"

[test."broken headlight is caught"]
group = "broken vehicle"
desc = "The function for checking headlights should return false if the vehicle has a broken headlight"

[test."flat tire is caught"]
group = "broken vehicle"
desc = "The function for checking tires should return false if the vehicle has a flat tire"

[test."extra tire throws error"]
group = "invalid vehicle"
desc = "Having an extra tire is invalid and should throw an error"

[test."extra headlight throws error"]
group = "invalid vehicle"
desc = "Having an extra headlight is invalid and should throw an error"
